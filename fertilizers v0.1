{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91717,"databundleVersionId":12184666,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport tensorflow.keras.layers as layers\nfrom tqdm import tqdm # for progress bar\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-12T11:28:48.644215Z","iopub.execute_input":"2025-06-12T11:28:48.644532Z","iopub.status.idle":"2025-06-12T11:29:08.873360Z","shell.execute_reply.started":"2025-06-12T11:28:48.644499Z","shell.execute_reply":"2025-06-12T11:29:08.872213Z"}},"outputs":[{"name":"stderr","text":"2025-06-12 11:28:51.654491: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1749727731.965276      35 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1749727732.054822      35 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"},{"name":"stdout","text":"/kaggle/input/playground-series-s5e6/sample_submission.csv\n/kaggle/input/playground-series-s5e6/train.csv\n/kaggle/input/playground-series-s5e6/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"# read csv\n\ncompetition_file_path = \"/kaggle/input/playground-series-s5e6\"\ntrain_file_path = competition_file_path + \"/train.csv\"\ntest_file_path = competition_file_path + \"/test.csv\"\nsample_subbission_file_path = competition_file_path + \"/sample_submission.csv\"\n\n\ntrain_dataset = pd.read_csv(train_file_path)\ntest_dataset = pd.read_csv(test_file_path)\nsample_submission = pd.read_csv(sample_subbission_file_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T11:29:08.874292Z","iopub.execute_input":"2025-06-12T11:29:08.874829Z","iopub.status.idle":"2025-06-12T11:29:10.377178Z","shell.execute_reply.started":"2025-06-12T11:29:08.874803Z","shell.execute_reply":"2025-06-12T11:29:10.376159Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"## Investigate dataset","metadata":{}},{"cell_type":"code","source":"train_dataset.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T11:29:10.379054Z","iopub.execute_input":"2025-06-12T11:29:10.379351Z","iopub.status.idle":"2025-06-12T11:29:10.408134Z","shell.execute_reply.started":"2025-06-12T11:29:10.379302Z","shell.execute_reply":"2025-06-12T11:29:10.407187Z"},"jupyter":{"source_hidden":true}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   id  Temparature  Humidity  Moisture Soil Type  Crop Type  Nitrogen  \\\n0   0           37        70        36    Clayey  Sugarcane        36   \n1   1           27        69        65     Sandy    Millets        30   \n2   2           29        63        32     Sandy    Millets        24   \n3   3           35        62        54     Sandy     Barley        39   \n4   4           35        58        43       Red      Paddy        37   \n\n   Potassium  Phosphorous Fertilizer Name  \n0          4            5           28-28  \n1          6           18           28-28  \n2         12           16        17-17-17  \n3         12            4        10-26-26  \n4          2           16             DAP  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Temparature</th>\n      <th>Humidity</th>\n      <th>Moisture</th>\n      <th>Soil Type</th>\n      <th>Crop Type</th>\n      <th>Nitrogen</th>\n      <th>Potassium</th>\n      <th>Phosphorous</th>\n      <th>Fertilizer Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>37</td>\n      <td>70</td>\n      <td>36</td>\n      <td>Clayey</td>\n      <td>Sugarcane</td>\n      <td>36</td>\n      <td>4</td>\n      <td>5</td>\n      <td>28-28</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>27</td>\n      <td>69</td>\n      <td>65</td>\n      <td>Sandy</td>\n      <td>Millets</td>\n      <td>30</td>\n      <td>6</td>\n      <td>18</td>\n      <td>28-28</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>29</td>\n      <td>63</td>\n      <td>32</td>\n      <td>Sandy</td>\n      <td>Millets</td>\n      <td>24</td>\n      <td>12</td>\n      <td>16</td>\n      <td>17-17-17</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>35</td>\n      <td>62</td>\n      <td>54</td>\n      <td>Sandy</td>\n      <td>Barley</td>\n      <td>39</td>\n      <td>12</td>\n      <td>4</td>\n      <td>10-26-26</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>35</td>\n      <td>58</td>\n      <td>43</td>\n      <td>Red</td>\n      <td>Paddy</td>\n      <td>37</td>\n      <td>2</td>\n      <td>16</td>\n      <td>DAP</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"train_dataset.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T11:29:10.409109Z","iopub.execute_input":"2025-06-12T11:29:10.409472Z","iopub.status.idle":"2025-06-12T11:29:10.552964Z","shell.execute_reply.started":"2025-06-12T11:29:10.409441Z","shell.execute_reply":"2025-06-12T11:29:10.551965Z"},"jupyter":{"source_hidden":true}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 750000 entries, 0 to 749999\nData columns (total 10 columns):\n #   Column           Non-Null Count   Dtype \n---  ------           --------------   ----- \n 0   id               750000 non-null  int64 \n 1   Temparature      750000 non-null  int64 \n 2   Humidity         750000 non-null  int64 \n 3   Moisture         750000 non-null  int64 \n 4   Soil Type        750000 non-null  object\n 5   Crop Type        750000 non-null  object\n 6   Nitrogen         750000 non-null  int64 \n 7   Potassium        750000 non-null  int64 \n 8   Phosphorous      750000 non-null  int64 \n 9   Fertilizer Name  750000 non-null  object\ndtypes: int64(7), object(3)\nmemory usage: 57.2+ MB\n","output_type":"stream"}],"execution_count":4},{"cell_type":"markdown","source":"Looking at the data, we can see that there are no nulls so we don't have to worry about that\n\n\nBut we'll have to find a good way to hot encode the training dataset","metadata":{}},{"cell_type":"markdown","source":"## Encoding data","metadata":{}},{"cell_type":"code","source":"### soil type\n\nprint(train_dataset[\"Soil Type\"].describe())\nprint(train_dataset[\"Soil Type\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T11:29:10.553901Z","iopub.execute_input":"2025-06-12T11:29:10.554164Z","iopub.status.idle":"2025-06-12T11:29:10.696847Z","shell.execute_reply.started":"2025-06-12T11:29:10.554143Z","shell.execute_reply":"2025-06-12T11:29:10.695676Z"},"jupyter":{"source_hidden":true}},"outputs":[{"name":"stdout","text":"count     750000\nunique         5\ntop        Sandy\nfreq      156710\nName: Soil Type, dtype: object\n['Clayey' 'Sandy' 'Red' 'Loamy' 'Black']\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"Since there are 5 unique soil types in this column, we can easily encode this 0 -> 4","metadata":{}},{"cell_type":"code","source":"# encoding crop type\n\nprint(train_dataset[\"Crop Type\"].describe())\nprint(train_dataset[\"Crop Type\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T11:29:10.698011Z","iopub.execute_input":"2025-06-12T11:29:10.698502Z","iopub.status.idle":"2025-06-12T11:29:10.847064Z","shell.execute_reply.started":"2025-06-12T11:29:10.698468Z","shell.execute_reply":"2025-06-12T11:29:10.846144Z"},"jupyter":{"source_hidden":true}},"outputs":[{"name":"stdout","text":"count     750000\nunique        11\ntop        Paddy\nfreq       85754\nName: Crop Type, dtype: object\n['Sugarcane' 'Millets' 'Barley' 'Paddy' 'Pulses' 'Tobacco' 'Ground Nuts'\n 'Maize' 'Cotton' 'Wheat' 'Oil seeds']\n","output_type":"stream"}],"execution_count":6},{"cell_type":"markdown","source":"Similary, there are 11 unique crop types in this column, we can easily encode this 0 -> 10","metadata":{}},{"cell_type":"code","source":"# encoding crop type\n\nprint(train_dataset[\"Fertilizer Name\"].describe())\nprint(train_dataset[\"Fertilizer Name\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T11:29:10.847993Z","iopub.execute_input":"2025-06-12T11:29:10.848325Z","iopub.status.idle":"2025-06-12T11:29:10.993258Z","shell.execute_reply.started":"2025-06-12T11:29:10.848274Z","shell.execute_reply":"2025-06-12T11:29:10.992392Z"},"jupyter":{"source_hidden":true}},"outputs":[{"name":"stdout","text":"count       750000\nunique           7\ntop       14-35-14\nfreq        114436\nName: Fertilizer Name, dtype: object\n['28-28' '17-17-17' '10-26-26' 'DAP' '20-20' '14-35-14' 'Urea']\n","output_type":"stream"}],"execution_count":7},{"cell_type":"markdown","source":"Similary, there are 7 unique crop types in this column, we can easily encode this 0 -> 6","metadata":{}},{"cell_type":"markdown","source":"## Enscapluting logic","metadata":{}},{"cell_type":"code","source":"class model_manager:\n    model = 0\n    def __init__(self):\n        self.define_simple_dnn_model()\n        \n    def define_simple_dnn_model(self):\n        self.model = tf.keras.models.Sequential([\n            layers.Input([9]),\n            layers.Dense(16 ),\n            layers.Dense(8),\n            layers.Dense(4),\n            layers.Dense(2),\n            layers.Dense(7),\n        ])\n\nmodel_manager_instance = model_manager()\nmodel_manager_instance.model.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T11:29:10.994142Z","iopub.execute_input":"2025-06-12T11:29:10.994410Z","iopub.status.idle":"2025-06-12T11:29:11.123489Z","shell.execute_reply.started":"2025-06-12T11:29:10.994387Z","shell.execute_reply":"2025-06-12T11:29:11.122728Z"}},"outputs":[{"name":"stderr","text":"2025-06-12 11:29:11.007487: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)                  │             \u001b[38;5;34m160\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │             \u001b[38;5;34m136\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)                   │              \u001b[38;5;34m36\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)                   │              \u001b[38;5;34m10\u001b[0m │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m)                   │              \u001b[38;5;34m21\u001b[0m │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)                  │             <span style=\"color: #00af00; text-decoration-color: #00af00\">160</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">136</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">36</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span> │\n├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">21</span> │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m363\u001b[0m (1.42 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">363</span> (1.42 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m363\u001b[0m (1.42 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">363</span> (1.42 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"class workflow:\n    train_dataset = []\n    test_dataset = []\n    sample_submission = []\n    input_to_model = []\n    ground_truth = []\n    model_prediction = []\n    model = 0\n    model_prediction_decoded = []\n    fertilizer_encodings = {\n            0:\"28-28\",\n            1:\"17-17-17\",\n            2:\"10-26-26\",\n            3:\"DAP\",\n            4:\"20-20\",\n            5:\"14-35-14\",\n            6:\"Urea\"\n        }\n    max_data_row = 750\n    submission = pd.DataFrame(columns=[\"id\",\"Fertilizer Name\"])\n\n    def __init__(self, model_manager):\n        self.load_data()\n        self.model = model_manager.model\n\n    def load_data(self):\n        # read csv\n        competition_file_path = \"/kaggle/input/playground-series-s5e6\"\n        train_file_path = competition_file_path + \"/train.csv\"\n        test_file_path = competition_file_path + \"/test.csv\"\n        sample_subbission_file_path = competition_file_path + \"/sample_submission.csv\"\n        \n        self.train_dataset = pd.read_csv(train_file_path)\n        self.test_dataset = pd.read_csv(test_file_path)\n        self.sample_submission = pd.read_csv(sample_subbission_file_path)\n\n    def prepare_datasets(self):\n        self.reduce_dataset()\n        self.encode_soil_type(self.train_dataset, is_printing = False)\n        self.encode_soil_type(self.test_dataset)\n\n        self.encode_crop_type(self.train_dataset)\n        self.encode_crop_type(self.test_dataset)\n\n        self.encode_fertilizer_name(self.train_dataset)\n\n        self.train_dataset = self.convert_column_type(self.train_dataset)\n        self.test_dataset = self.convert_column_type(self.test_dataset)\n\n        self.ground_truth = self.train_dataset.pop(\"Fertilizer Name\")\n        self.input_to_model = self.train_dataset\n        self.convert_ground_truth_to_categories_optimised()\n\n        #self.ground_truth = self.convert_column_type(self.ground_truth)\n        #self.input_to_model = self.convert_column_type(self.input_to_model)\n\n    def reduce_dataset(self):\n        self.train_dataset = self.train_dataset[0:self.max_data_row]\n        self.test_dataset = self.test_dataset[0:self.max_data_row]\n\n    def encode_soil_type(self, dataset, is_printing = False):\n        if is_printing:\n            print(dataset[\"Soil Type\"].describe())\n            print(dataset[\"Soil Type\"].unique())\n\n        self.encode_value(dataset, \"Soil Type\", \"Clayey\", 0)\n        self.encode_value(dataset, \"Soil Type\", \"Sandy\", 1)\n        self.encode_value(dataset, \"Soil Type\", \"Red\", 0)\n        self.encode_value(dataset, \"Soil Type\", \"Loamy\", 3)\n        self.encode_value(dataset, \"Soil Type\", \"Black\", 4)\n\n    def encode_value(self, dataset, column_name, value_to_replace, new_value):\n        column = dataset.loc[:, [column_name]]\n        mask = [dataset[column_name] == value_to_replace]\n        column[mask] = new_value\n        dataset[column_name] = column\n\n    def encode_crop_type(self, dataset):\n        self.encode_value(dataset, \"Crop Type\", \"Sugarcane\", 0)\n        self.encode_value(dataset, \"Crop Type\", \"Millets\", 1)\n        self.encode_value(dataset, \"Crop Type\", \"Barley\", 2)\n        self.encode_value(dataset, \"Crop Type\", \"Paddy\", 3)\n        self.encode_value(dataset, \"Crop Type\", \"Pulses\", 4)\n        self.encode_value(dataset, \"Crop Type\", \"Tobacco\", 5)\n        self.encode_value(dataset, \"Crop Type\", \"Ground Nuts\", 6)\n        self.encode_value(dataset, \"Crop Type\", \"Maize\", 7)\n        self.encode_value(dataset, \"Crop Type\", \"Cotton\", 8)\n        self.encode_value(dataset, \"Crop Type\", \"Wheat\", 9)\n        self.encode_value(dataset, \"Crop Type\", \"Oil seeds\", 10)\n\n    def encode_fertilizer_name(self, dataset):\n        self.encode_value(dataset, \"Fertilizer Name\", \"28-28\", 0)\n        self.encode_value(dataset, \"Fertilizer Name\", \"17-17-17\", 1)\n        self.encode_value(dataset, \"Fertilizer Name\", \"10-26-26\", 2)\n        self.encode_value(dataset, \"Fertilizer Name\", \"DAP\", 3)\n        self.encode_value(dataset, \"Fertilizer Name\", \"20-20\", 4)\n        self.encode_value(dataset, \"Fertilizer Name\", \"14-35-14\", 5)\n        self.encode_value(dataset, \"Fertilizer Name\", \"Urea\", 6)\n\n    def convert_database_types(self, database, is_test_dataset = False):\n        self.convert_column_type(self.train_dataset[\"Soil Type\"])\n        self.convert_column_type(self.train_dataset[\"Crop Type\"])\n        self.convert_column_type(self.train_dataset[\"Fertilizer Name\"])\n        \n    def convert_column_type(self, column):\n        return column.astype(\"int64\")\n\n    def convert_ground_truth_to_categories_optimised(self):\n        indices_to_change = np.arange(0, self.max_data_row, 1)\n        categorised_ground_truth = np.array([[0,0,0,0,0,0,0] for x in indices_to_change])\n        for index in tqdm(indices_to_change):\n            category_value = np.zeros(7)\n            category_value[self.ground_truth[index]] = 1\n            category_value_to_add = np.array([category_value])\n            categorised_ground_truth[index] = category_value_to_add    \n        self.ground_truth = categorised_ground_truth\n    \n    def build_model(self):\n        loss_function = tf.keras.losses.BinaryCrossentropy()\n        self.model.compile(optimizer=\"adam\", loss=loss_function, metrics=[\"accuracy\"])\n\n    def train_model(self):\n        self.model.fit(self.input_to_model, self.ground_truth)\n\n    def predict_test_dataset(self):\n        self.model_prediction = self.model.predict(self.test_dataset)\n    \n    def decode_model_predictions(self):\n        self.find_indices_of_highest_values_in_model_prediction()\n        self.decode_class_numbers_into_fertilizer_names()\n\n    def find_indices_of_highest_values_in_model_prediction(self):\n        model_prediction_decoded = np.array([[0,0,0] for x in self.model_prediction])\n        for class_index, prediction in enumerate(tqdm(self.model_prediction)):\n            top_3_predictions = sorted(prediction, reverse=True)[:3]\n            highest_classes = np.zeros(3)\n            for index, value in enumerate(top_3_predictions):\n                class_encoding = np.where(value == prediction)[0]\n                highest_classes[index] = class_encoding\n            model_prediction_decoded[class_index] = highest_classes\n        self.model_prediction_decoded = model_prediction_decoded\n\n    def decode_class_numbers_into_fertilizer_names(self):\n        ## The max number of characters for each value in the array is defined by the initalised value here\n        ## so I made the initalised value the longest possible value\n        model_prediction_decoded = np.array([\"xx-xx-xx xx-xx-xx xx-xx-xx\" for x in self.model_prediction])\n        for class_index, prediction in enumerate(tqdm(self.model_prediction_decoded)):\n            fertizier_prediction = self.decode_fertilizer_list(prediction)\n            model_prediction_decoded[class_index] = fertizier_prediction\n        self.model_prediction_decoded = model_prediction_decoded\n\n    def decode_fertilizer(self, class_number):\n        return self.fertilizer_encodings.get(class_number)\n\n    def decode_fertilizer_list(self, array_of_class_numbers):\n        array_to_return = np.zeros(3, dtype=\"object\")\n        for index, value in enumerate(array_of_class_numbers):\n            array_to_return[index] = self.decode_fertilizer(value)\n        array_as_string_to_return = self.convert_list_into_single_string(array_to_return)\n        return array_as_string_to_return\n\n    def convert_list_into_single_string(self, input_list, delimiter = \" \"):\n        return delimiter.join(input_list)\n\n    def create_submission(self):\n        self.predict_test_dataset()\n        self.decode_model_predictions()\n        id_column = self.test_dataset[\"id\"]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T11:38:37.363770Z","iopub.execute_input":"2025-06-12T11:38:37.364569Z","iopub.status.idle":"2025-06-12T11:38:37.401185Z","shell.execute_reply.started":"2025-06-12T11:38:37.364531Z","shell.execute_reply":"2025-06-12T11:38:37.400223Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"workflow_instance = workflow(model_manager_instance)\nworkflow_instance.prepare_datasets()\nworkflow_instance.build_model()\nworkflow_instance.train_model()\nworkflow_instance.predict_test_dataset()\nworkflow_instance.decode_model_predictions()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T11:38:41.601060Z","iopub.execute_input":"2025-06-12T11:38:41.601406Z","iopub.status.idle":"2025-06-12T11:38:45.342267Z","shell.execute_reply.started":"2025-06-12T11:38:41.601380Z","shell.execute_reply":"2025-06-12T11:38:45.341302Z"}},"outputs":[{"name":"stderr","text":"100%|██████████| 750/750 [00:00<00:00, 175503.68it/s]\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.1641 - loss: 6.1585\n\u001b[1m24/24\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n","output_type":"stream"},{"name":"stderr","text":"  0%|          | 0/750 [00:00<?, ?it/s]/tmp/ipykernel_35/605253651.py:138: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n  highest_classes[index] = class_encoding\n100%|██████████| 750/750 [00:00<00:00, 56355.86it/s]\n100%|██████████| 750/750 [00:00<00:00, 196903.36it/s]\n","output_type":"stream"}],"execution_count":33},{"cell_type":"code","source":"print(np.shape(workflow_instance.model_prediction_decoded))\nworkflow_instance.model_prediction_decoded","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T11:38:58.442569Z","iopub.execute_input":"2025-06-12T11:38:58.442869Z","iopub.status.idle":"2025-06-12T11:38:58.449619Z","shell.execute_reply.started":"2025-06-12T11:38:58.442847Z","shell.execute_reply":"2025-06-12T11:38:58.448791Z"}},"outputs":[{"name":"stdout","text":"(750,)\n","output_type":"stream"},{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"'10-26-26 17-17-17 Urea'"},"metadata":{}}],"execution_count":35},{"cell_type":"code","source":"workflow_instance.model_prediction_decoded","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T11:29:15.412108Z","iopub.status.idle":"2025-06-12T11:29:15.412389Z","shell.execute_reply.started":"2025-06-12T11:29:15.412246Z","shell.execute_reply":"2025-06-12T11:29:15.412257Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(np.shape(workflow_instance.ground_truth))\nworkflow_instance.ground_truth[0]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T11:29:15.414098Z","iopub.status.idle":"2025-06-12T11:29:15.414563Z","shell.execute_reply.started":"2025-06-12T11:29:15.414400Z","shell.execute_reply":"2025-06-12T11:29:15.414417Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"submission = pd.DataFrame(columns=[\"id\",\"Fertilizer Name\"])\nsubmission","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T11:50:51.232172Z","iopub.execute_input":"2025-06-12T11:50:51.232505Z","iopub.status.idle":"2025-06-12T11:50:51.242049Z","shell.execute_reply.started":"2025-06-12T11:50:51.232478Z","shell.execute_reply":"2025-06-12T11:50:51.241034Z"}},"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"Empty DataFrame\nColumns: [id, Fertilizer Name]\nIndex: []","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Fertilizer Name</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":39},{"cell_type":"code","source":"id_column = workflow_instance.test_dataset[\"id\"]\nsubmission[\"id\"] = id_column\nsubmission","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-12T11:52:13.176017Z","iopub.execute_input":"2025-06-12T11:52:13.176288Z","iopub.status.idle":"2025-06-12T11:52:13.186173Z","shell.execute_reply.started":"2025-06-12T11:52:13.176270Z","shell.execute_reply":"2025-06-12T11:52:13.185229Z"}},"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"         id Fertilizer Name\n0    750000             NaN\n1    750001             NaN\n2    750002             NaN\n3    750003             NaN\n4    750004             NaN\n..      ...             ...\n745  750745             NaN\n746  750746             NaN\n747  750747             NaN\n748  750748             NaN\n749  750749             NaN\n\n[750 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Fertilizer Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>750000</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>750001</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>750002</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>750003</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>750004</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>745</th>\n      <td>750745</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>746</th>\n      <td>750746</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>747</th>\n      <td>750747</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>748</th>\n      <td>750748</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>749</th>\n      <td>750749</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>750 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":44}]}