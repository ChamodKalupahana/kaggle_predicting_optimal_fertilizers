{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91717,"databundleVersionId":12184666,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport tensorflow as tf\nimport tensorflow.keras.layers as layers\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-06T23:27:15.359780Z","iopub.execute_input":"2025-06-06T23:27:15.361008Z","iopub.status.idle":"2025-06-06T23:27:15.453192Z","shell.execute_reply.started":"2025-06-06T23:27:15.360979Z","shell.execute_reply":"2025-06-06T23:27:15.451943Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s5e6/sample_submission.csv\n/kaggle/input/playground-series-s5e6/train.csv\n/kaggle/input/playground-series-s5e6/test.csv\n","output_type":"stream"}],"execution_count":111},{"cell_type":"code","source":"# read csv\n\ncompetition_file_path = \"/kaggle/input/playground-series-s5e6\"\ntrain_file_path = competition_file_path + \"/train.csv\"\ntest_file_path = competition_file_path + \"/test.csv\"\nsample_subbission_file_path = competition_file_path + \"/sample_submission.csv\"\n\n\ntrain_dataset = pd.read_csv(train_file_path)\ntest_dataset = pd.read_csv(test_file_path)\nsample_submission = pd.read_csv(sample_subbission_file_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-06T23:03:48.929169Z","iopub.execute_input":"2025-06-06T23:03:48.929447Z","iopub.status.idle":"2025-06-06T23:03:49.978071Z","shell.execute_reply.started":"2025-06-06T23:03:48.929425Z","shell.execute_reply":"2025-06-06T23:03:49.976976Z"},"jupyter":{"source_hidden":true}},"outputs":[],"execution_count":89},{"cell_type":"markdown","source":"### Investigate dataset","metadata":{}},{"cell_type":"code","source":"train_dataset.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-06T23:03:49.979650Z","iopub.execute_input":"2025-06-06T23:03:49.979882Z","iopub.status.idle":"2025-06-06T23:03:49.992176Z","shell.execute_reply.started":"2025-06-06T23:03:49.979865Z","shell.execute_reply":"2025-06-06T23:03:49.990692Z"},"jupyter":{"source_hidden":true}},"outputs":[{"execution_count":90,"output_type":"execute_result","data":{"text/plain":"   id  Temparature  Humidity  Moisture Soil Type  Crop Type  Nitrogen  \\\n0   0           37        70        36    Clayey  Sugarcane        36   \n1   1           27        69        65     Sandy    Millets        30   \n2   2           29        63        32     Sandy    Millets        24   \n3   3           35        62        54     Sandy     Barley        39   \n4   4           35        58        43       Red      Paddy        37   \n\n   Potassium  Phosphorous Fertilizer Name  \n0          4            5           28-28  \n1          6           18           28-28  \n2         12           16        17-17-17  \n3         12            4        10-26-26  \n4          2           16             DAP  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Temparature</th>\n      <th>Humidity</th>\n      <th>Moisture</th>\n      <th>Soil Type</th>\n      <th>Crop Type</th>\n      <th>Nitrogen</th>\n      <th>Potassium</th>\n      <th>Phosphorous</th>\n      <th>Fertilizer Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>37</td>\n      <td>70</td>\n      <td>36</td>\n      <td>Clayey</td>\n      <td>Sugarcane</td>\n      <td>36</td>\n      <td>4</td>\n      <td>5</td>\n      <td>28-28</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>27</td>\n      <td>69</td>\n      <td>65</td>\n      <td>Sandy</td>\n      <td>Millets</td>\n      <td>30</td>\n      <td>6</td>\n      <td>18</td>\n      <td>28-28</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>29</td>\n      <td>63</td>\n      <td>32</td>\n      <td>Sandy</td>\n      <td>Millets</td>\n      <td>24</td>\n      <td>12</td>\n      <td>16</td>\n      <td>17-17-17</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>35</td>\n      <td>62</td>\n      <td>54</td>\n      <td>Sandy</td>\n      <td>Barley</td>\n      <td>39</td>\n      <td>12</td>\n      <td>4</td>\n      <td>10-26-26</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>35</td>\n      <td>58</td>\n      <td>43</td>\n      <td>Red</td>\n      <td>Paddy</td>\n      <td>37</td>\n      <td>2</td>\n      <td>16</td>\n      <td>DAP</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":90},{"cell_type":"code","source":"train_dataset.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-06T23:03:49.993104Z","iopub.execute_input":"2025-06-06T23:03:49.993366Z","iopub.status.idle":"2025-06-06T23:03:50.132136Z","shell.execute_reply.started":"2025-06-06T23:03:49.993346Z","shell.execute_reply":"2025-06-06T23:03:50.131074Z"},"jupyter":{"source_hidden":true}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 750000 entries, 0 to 749999\nData columns (total 10 columns):\n #   Column           Non-Null Count   Dtype \n---  ------           --------------   ----- \n 0   id               750000 non-null  int64 \n 1   Temparature      750000 non-null  int64 \n 2   Humidity         750000 non-null  int64 \n 3   Moisture         750000 non-null  int64 \n 4   Soil Type        750000 non-null  object\n 5   Crop Type        750000 non-null  object\n 6   Nitrogen         750000 non-null  int64 \n 7   Potassium        750000 non-null  int64 \n 8   Phosphorous      750000 non-null  int64 \n 9   Fertilizer Name  750000 non-null  object\ndtypes: int64(7), object(3)\nmemory usage: 57.2+ MB\n","output_type":"stream"}],"execution_count":91},{"cell_type":"markdown","source":"Looking at the data, we can see that there are no nulls so we don't have to worry about that\n\n\nBut we'll have to find a good way to hot encode the training dataset","metadata":{}},{"cell_type":"markdown","source":"### Encoding data","metadata":{}},{"cell_type":"code","source":"### soil type\n\nprint(train_dataset[\"Soil Type\"].describe())\nprint(train_dataset[\"Soil Type\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-06T23:03:50.134874Z","iopub.execute_input":"2025-06-06T23:03:50.135168Z","iopub.status.idle":"2025-06-06T23:03:50.275736Z","shell.execute_reply.started":"2025-06-06T23:03:50.135148Z","shell.execute_reply":"2025-06-06T23:03:50.274543Z"},"jupyter":{"source_hidden":true}},"outputs":[{"name":"stdout","text":"count     750000\nunique         5\ntop        Sandy\nfreq      156710\nName: Soil Type, dtype: object\n['Clayey' 'Sandy' 'Red' 'Loamy' 'Black']\n","output_type":"stream"}],"execution_count":92},{"cell_type":"markdown","source":"Since there are 5 unique soil types in this column, we can easily encode this 0 -> 4","metadata":{}},{"cell_type":"code","source":"# encoding crop type\n\nprint(train_dataset[\"Crop Type\"].describe())\nprint(train_dataset[\"Crop Type\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-06T23:03:50.276825Z","iopub.execute_input":"2025-06-06T23:03:50.277189Z","iopub.status.idle":"2025-06-06T23:03:50.425303Z","shell.execute_reply.started":"2025-06-06T23:03:50.277166Z","shell.execute_reply":"2025-06-06T23:03:50.424216Z"},"jupyter":{"source_hidden":true}},"outputs":[{"name":"stdout","text":"count     750000\nunique        11\ntop        Paddy\nfreq       85754\nName: Crop Type, dtype: object\n['Sugarcane' 'Millets' 'Barley' 'Paddy' 'Pulses' 'Tobacco' 'Ground Nuts'\n 'Maize' 'Cotton' 'Wheat' 'Oil seeds']\n","output_type":"stream"}],"execution_count":93},{"cell_type":"markdown","source":"Similary, there are 11 unique crop types in this column, we can easily encode this 0 -> 10","metadata":{}},{"cell_type":"code","source":"# encoding crop type\n\nprint(train_dataset[\"Fertilizer Name\"].describe())\nprint(train_dataset[\"Fertilizer Name\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-06T23:16:54.734420Z","iopub.execute_input":"2025-06-06T23:16:54.735837Z","iopub.status.idle":"2025-06-06T23:16:54.883318Z","shell.execute_reply.started":"2025-06-06T23:16:54.735803Z","shell.execute_reply":"2025-06-06T23:16:54.882300Z"},"jupyter":{"source_hidden":true}},"outputs":[{"name":"stdout","text":"count       750000\nunique           7\ntop       14-35-14\nfreq        114436\nName: Fertilizer Name, dtype: object\n['28-28' '17-17-17' '10-26-26' 'DAP' '20-20' '14-35-14' 'Urea']\n","output_type":"stream"}],"execution_count":104},{"cell_type":"markdown","source":"Similary, there are 7 unique crop types in this column, we can easily encode this 0 -> 6","metadata":{}},{"cell_type":"markdown","source":"### Enscapluting logic","metadata":{}},{"cell_type":"code","source":"class workflow:\n    train_dataset = []\n    test_dataset = []\n    sample_submission = []\n    def __init__(self):\n        self.load_data()\n\n    def load_data(self):\n        # read csv\n        competition_file_path = \"/kaggle/input/playground-series-s5e6\"\n        train_file_path = competition_file_path + \"/train.csv\"\n        test_file_path = competition_file_path + \"/test.csv\"\n        sample_subbission_file_path = competition_file_path + \"/sample_submission.csv\"\n        \n        self.train_dataset = pd.read_csv(train_file_path)\n        self.test_dataset = pd.read_csv(test_file_path)\n        self.sample_submission = pd.read_csv(sample_subbission_file_path)\n\n    def prepare_datasets(self):\n        self.encode_soil_type(self.train_dataset, is_printing = False)\n        self.encode_soil_type(self.test_dataset)\n\n        self.encode_crop_type(self.train_dataset)\n        self.encode_crop_type(self.test_dataset)\n\n        self.encode_fertilizer_name(self.train_dataset)\n\n    def encode_soil_type(self, dataset, is_printing = False):\n        if is_printing:\n            print(dataset[\"Soil Type\"].describe())\n            print(dataset[\"Soil Type\"].unique())\n\n        self.encode_value(dataset, \"Soil Type\", \"Clayey\", 0)\n        self.encode_value(dataset, \"Soil Type\", \"Sandy\", 1)\n        self.encode_value(dataset, \"Soil Type\", \"Red\", 0)\n        self.encode_value(dataset, \"Soil Type\", \"Loamy\", 3)\n        self.encode_value(dataset, \"Soil Type\", \"Black\", 4)\n\n    def encode_value(self, dataset, column_name, value_to_replace, new_value):\n        column = dataset.loc[:, [column_name]]\n        mask = [dataset[column_name] == value_to_replace]\n        column[mask] = new_value\n        dataset[column_name] = column\n\n    def encode_crop_type(self, dataset):\n        self.encode_value(dataset, \"Crop Type\", \"Sugarcane\", 0)\n        self.encode_value(dataset, \"Crop Type\", \"Millets\", 1)\n        self.encode_value(dataset, \"Crop Type\", \"Barley\", 2)\n        self.encode_value(dataset, \"Crop Type\", \"Paddy\", 3)\n        self.encode_value(dataset, \"Crop Type\", \"Pulses\", 4)\n        self.encode_value(dataset, \"Crop Type\", \"Tobacco\", 5)\n        self.encode_value(dataset, \"Crop Type\", \"Ground Nuts\", 6)\n        self.encode_value(dataset, \"Crop Type\", \"Maize\", 7)\n        self.encode_value(dataset, \"Crop Type\", \"Cotton\", 8)\n        self.encode_value(dataset, \"Crop Type\", \"Wheat\", 9)\n        self.encode_value(dataset, \"Crop Type\", \"Oil seeds\", 10)\n\n    def encode_fertilizer_name(self, dataset):\n        self.encode_value(dataset, \"Fertilizer Name\", \"28-28\", 0)\n        self.encode_value(dataset, \"Fertilizer Name\", \"17-17-17\", 1)\n        self.encode_value(dataset, \"Fertilizer Name\", \"10-26-26\", 2)\n        self.encode_value(dataset, \"Fertilizer Name\", \"DAP\", 3)\n        self.encode_value(dataset, \"Fertilizer Name\", \"20-20\", 4)\n        self.encode_value(dataset, \"Fertilizer Name\", \"14-35-14\", 5)\n        self.encode_value(dataset, \"Fertilizer Name\", \"Urea\", 6)\n        \n        \n        \nworkflow_instance = workflow()\nworkflow_instance.prepare_datasets()\nworkflow_instance.train_dataset","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-06T23:20:10.137630Z","iopub.execute_input":"2025-06-06T23:20:10.138116Z","iopub.status.idle":"2025-06-06T23:20:13.410482Z","shell.execute_reply.started":"2025-06-06T23:20:10.137958Z","shell.execute_reply":"2025-06-06T23:20:13.409494Z"}},"outputs":[{"execution_count":106,"output_type":"execute_result","data":{"text/plain":"            id  Temparature  Humidity  Moisture Soil Type Crop Type  Nitrogen  \\\n0            0           37        70        36         0         0        36   \n1            1           27        69        65         1         1        30   \n2            2           29        63        32         1         1        24   \n3            3           35        62        54         1         2        39   \n4            4           35        58        43         0         3        37   \n...        ...          ...       ...       ...       ...       ...       ...   \n749995  749995           25        69        30         0         7         8   \n749996  749996           37        64        58         3         0        38   \n749997  749997           35        68        59         1         6         6   \n749998  749998           31        68        29         0         8         9   \n749999  749999           33        55        29         3         8         4   \n\n        Potassium  Phosphorous Fertilizer Name  \n0               4            5               0  \n1               6           18               0  \n2              12           16               1  \n3              12            4               2  \n4               2           16               3  \n...           ...          ...             ...  \n749995         16            6               0  \n749996          8           20               1  \n749997         11           29               2  \n749998         11           12               4  \n749999         10            9               6  \n\n[750000 rows x 10 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Temparature</th>\n      <th>Humidity</th>\n      <th>Moisture</th>\n      <th>Soil Type</th>\n      <th>Crop Type</th>\n      <th>Nitrogen</th>\n      <th>Potassium</th>\n      <th>Phosphorous</th>\n      <th>Fertilizer Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>37</td>\n      <td>70</td>\n      <td>36</td>\n      <td>0</td>\n      <td>0</td>\n      <td>36</td>\n      <td>4</td>\n      <td>5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>27</td>\n      <td>69</td>\n      <td>65</td>\n      <td>1</td>\n      <td>1</td>\n      <td>30</td>\n      <td>6</td>\n      <td>18</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>29</td>\n      <td>63</td>\n      <td>32</td>\n      <td>1</td>\n      <td>1</td>\n      <td>24</td>\n      <td>12</td>\n      <td>16</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>35</td>\n      <td>62</td>\n      <td>54</td>\n      <td>1</td>\n      <td>2</td>\n      <td>39</td>\n      <td>12</td>\n      <td>4</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>35</td>\n      <td>58</td>\n      <td>43</td>\n      <td>0</td>\n      <td>3</td>\n      <td>37</td>\n      <td>2</td>\n      <td>16</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>749995</th>\n      <td>749995</td>\n      <td>25</td>\n      <td>69</td>\n      <td>30</td>\n      <td>0</td>\n      <td>7</td>\n      <td>8</td>\n      <td>16</td>\n      <td>6</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>749996</th>\n      <td>749996</td>\n      <td>37</td>\n      <td>64</td>\n      <td>58</td>\n      <td>3</td>\n      <td>0</td>\n      <td>38</td>\n      <td>8</td>\n      <td>20</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>749997</th>\n      <td>749997</td>\n      <td>35</td>\n      <td>68</td>\n      <td>59</td>\n      <td>1</td>\n      <td>6</td>\n      <td>6</td>\n      <td>11</td>\n      <td>29</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>749998</th>\n      <td>749998</td>\n      <td>31</td>\n      <td>68</td>\n      <td>29</td>\n      <td>0</td>\n      <td>8</td>\n      <td>9</td>\n      <td>11</td>\n      <td>12</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>749999</th>\n      <td>749999</td>\n      <td>33</td>\n      <td>55</td>\n      <td>29</td>\n      <td>3</td>\n      <td>8</td>\n      <td>4</td>\n      <td>10</td>\n      <td>9</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n<p>750000 rows × 10 columns</p>\n</div>"},"metadata":{}}],"execution_count":106},{"cell_type":"code","source":"class model_manager:\n    model = 0\n    def __init__(self):\n        self.define_simple_dnn_model()\n        \n    def define_simple_dnn_model(self):\n        self.model = tf.keras.models.Sequential([\n            layers.Input([0, 2]),\n            layers.Dense(2),\n        ])\n\nmodel_manager_instance = model_manager()\nmodel_manager_instance.model.summary()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-06T23:32:26.153795Z","iopub.execute_input":"2025-06-06T23:32:26.154315Z","iopub.status.idle":"2025-06-06T23:32:26.185360Z","shell.execute_reply.started":"2025-06-06T23:32:26.154289Z","shell.execute_reply":"2025-06-06T23:32:26.184109Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m0\u001b[0m, \u001b[38;5;34m2\u001b[0m)                │               \u001b[38;5;34m6\u001b[0m │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                │               <span style=\"color: #00af00; text-decoration-color: #00af00\">6</span> │\n└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m6\u001b[0m (24.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">6</span> (24.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m6\u001b[0m (24.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">6</span> (24.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}],"execution_count":127}]}