{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2927211b",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-06-07T15:27:46.439310Z",
     "iopub.status.busy": "2025-06-07T15:27:46.439006Z",
     "iopub.status.idle": "2025-06-07T15:28:08.043564Z",
     "shell.execute_reply": "2025-06-07T15:28:08.042190Z"
    },
    "papermill": {
     "duration": 21.613035,
     "end_time": "2025-06-07T15:28:08.045376",
     "exception": false,
     "start_time": "2025-06-07T15:27:46.432341",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-06-07 15:27:50.560227: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1749310070.790449      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1749310070.856122      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s5e6/sample_submission.csv\n",
      "/kaggle/input/playground-series-s5e6/train.csv\n",
      "/kaggle/input/playground-series-s5e6/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import tensorflow as tf\n",
    "import tensorflow.keras.layers as layers\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "200373f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T15:28:08.055641Z",
     "iopub.status.busy": "2025-06-07T15:28:08.055034Z",
     "iopub.status.idle": "2025-06-07T15:28:09.789893Z",
     "shell.execute_reply": "2025-06-07T15:28:09.789017Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 1.741542,
     "end_time": "2025-06-07T15:28:09.791488",
     "exception": false,
     "start_time": "2025-06-07T15:28:08.049946",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# read csv\n",
    "\n",
    "competition_file_path = \"/kaggle/input/playground-series-s5e6\"\n",
    "train_file_path = competition_file_path + \"/train.csv\"\n",
    "test_file_path = competition_file_path + \"/test.csv\"\n",
    "sample_subbission_file_path = competition_file_path + \"/sample_submission.csv\"\n",
    "\n",
    "\n",
    "train_dataset = pd.read_csv(train_file_path)\n",
    "test_dataset = pd.read_csv(test_file_path)\n",
    "sample_submission = pd.read_csv(sample_subbission_file_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "307b9c36",
   "metadata": {
    "papermill": {
     "duration": 0.003567,
     "end_time": "2025-06-07T15:28:09.799288",
     "exception": false,
     "start_time": "2025-06-07T15:28:09.795721",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Investigate dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "2451f492",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T15:28:09.808137Z",
     "iopub.status.busy": "2025-06-07T15:28:09.807821Z",
     "iopub.status.idle": "2025-06-07T15:28:09.833735Z",
     "shell.execute_reply": "2025-06-07T15:28:09.832772Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.032152,
     "end_time": "2025-06-07T15:28:09.835328",
     "exception": false,
     "start_time": "2025-06-07T15:28:09.803176",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Temparature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Moisture</th>\n",
       "      <th>Soil Type</th>\n",
       "      <th>Crop Type</th>\n",
       "      <th>Nitrogen</th>\n",
       "      <th>Potassium</th>\n",
       "      <th>Phosphorous</th>\n",
       "      <th>Fertilizer Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>37</td>\n",
       "      <td>70</td>\n",
       "      <td>36</td>\n",
       "      <td>Clayey</td>\n",
       "      <td>Sugarcane</td>\n",
       "      <td>36</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>28-28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>69</td>\n",
       "      <td>65</td>\n",
       "      <td>Sandy</td>\n",
       "      <td>Millets</td>\n",
       "      <td>30</td>\n",
       "      <td>6</td>\n",
       "      <td>18</td>\n",
       "      <td>28-28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>29</td>\n",
       "      <td>63</td>\n",
       "      <td>32</td>\n",
       "      <td>Sandy</td>\n",
       "      <td>Millets</td>\n",
       "      <td>24</td>\n",
       "      <td>12</td>\n",
       "      <td>16</td>\n",
       "      <td>17-17-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>35</td>\n",
       "      <td>62</td>\n",
       "      <td>54</td>\n",
       "      <td>Sandy</td>\n",
       "      <td>Barley</td>\n",
       "      <td>39</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>10-26-26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>35</td>\n",
       "      <td>58</td>\n",
       "      <td>43</td>\n",
       "      <td>Red</td>\n",
       "      <td>Paddy</td>\n",
       "      <td>37</td>\n",
       "      <td>2</td>\n",
       "      <td>16</td>\n",
       "      <td>DAP</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  Temparature  Humidity  Moisture Soil Type  Crop Type  Nitrogen  \\\n",
       "0   0           37        70        36    Clayey  Sugarcane        36   \n",
       "1   1           27        69        65     Sandy    Millets        30   \n",
       "2   2           29        63        32     Sandy    Millets        24   \n",
       "3   3           35        62        54     Sandy     Barley        39   \n",
       "4   4           35        58        43       Red      Paddy        37   \n",
       "\n",
       "   Potassium  Phosphorous Fertilizer Name  \n",
       "0          4            5           28-28  \n",
       "1          6           18           28-28  \n",
       "2         12           16        17-17-17  \n",
       "3         12            4        10-26-26  \n",
       "4          2           16             DAP  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1dd46b1c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T15:28:09.845008Z",
     "iopub.status.busy": "2025-06-07T15:28:09.844675Z",
     "iopub.status.idle": "2025-06-07T15:28:09.990392Z",
     "shell.execute_reply": "2025-06-07T15:28:09.989317Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.152615,
     "end_time": "2025-06-07T15:28:09.992198",
     "exception": false,
     "start_time": "2025-06-07T15:28:09.839583",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 750000 entries, 0 to 749999\n",
      "Data columns (total 10 columns):\n",
      " #   Column           Non-Null Count   Dtype \n",
      "---  ------           --------------   ----- \n",
      " 0   id               750000 non-null  int64 \n",
      " 1   Temparature      750000 non-null  int64 \n",
      " 2   Humidity         750000 non-null  int64 \n",
      " 3   Moisture         750000 non-null  int64 \n",
      " 4   Soil Type        750000 non-null  object\n",
      " 5   Crop Type        750000 non-null  object\n",
      " 6   Nitrogen         750000 non-null  int64 \n",
      " 7   Potassium        750000 non-null  int64 \n",
      " 8   Phosphorous      750000 non-null  int64 \n",
      " 9   Fertilizer Name  750000 non-null  object\n",
      "dtypes: int64(7), object(3)\n",
      "memory usage: 57.2+ MB\n"
     ]
    }
   ],
   "source": [
    "train_dataset.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "102c2688",
   "metadata": {
    "papermill": {
     "duration": 0.003942,
     "end_time": "2025-06-07T15:28:10.000460",
     "exception": false,
     "start_time": "2025-06-07T15:28:09.996518",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Looking at the data, we can see that there are no nulls so we don't have to worry about that\n",
    "\n",
    "\n",
    "But we'll have to find a good way to hot encode the training dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88631a53",
   "metadata": {
    "papermill": {
     "duration": 0.003817,
     "end_time": "2025-06-07T15:28:10.008504",
     "exception": false,
     "start_time": "2025-06-07T15:28:10.004687",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Encoding data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "31124d5c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T15:28:10.017916Z",
     "iopub.status.busy": "2025-06-07T15:28:10.017547Z",
     "iopub.status.idle": "2025-06-07T15:28:10.157330Z",
     "shell.execute_reply": "2025-06-07T15:28:10.156190Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.146312,
     "end_time": "2025-06-07T15:28:10.158835",
     "exception": false,
     "start_time": "2025-06-07T15:28:10.012523",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count     750000\n",
      "unique         5\n",
      "top        Sandy\n",
      "freq      156710\n",
      "Name: Soil Type, dtype: object\n",
      "['Clayey' 'Sandy' 'Red' 'Loamy' 'Black']\n"
     ]
    }
   ],
   "source": [
    "### soil type\n",
    "\n",
    "print(train_dataset[\"Soil Type\"].describe())\n",
    "print(train_dataset[\"Soil Type\"].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "124e7635",
   "metadata": {
    "papermill": {
     "duration": 0.00423,
     "end_time": "2025-06-07T15:28:10.167397",
     "exception": false,
     "start_time": "2025-06-07T15:28:10.163167",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Since there are 5 unique soil types in this column, we can easily encode this 0 -> 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "58c6beb1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T15:28:10.176880Z",
     "iopub.status.busy": "2025-06-07T15:28:10.176519Z",
     "iopub.status.idle": "2025-06-07T15:28:10.321397Z",
     "shell.execute_reply": "2025-06-07T15:28:10.320430Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.151272,
     "end_time": "2025-06-07T15:28:10.322747",
     "exception": false,
     "start_time": "2025-06-07T15:28:10.171475",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count     750000\n",
      "unique        11\n",
      "top        Paddy\n",
      "freq       85754\n",
      "Name: Crop Type, dtype: object\n",
      "['Sugarcane' 'Millets' 'Barley' 'Paddy' 'Pulses' 'Tobacco' 'Ground Nuts'\n",
      " 'Maize' 'Cotton' 'Wheat' 'Oil seeds']\n"
     ]
    }
   ],
   "source": [
    "# encoding crop type\n",
    "\n",
    "print(train_dataset[\"Crop Type\"].describe())\n",
    "print(train_dataset[\"Crop Type\"].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "816aafb4",
   "metadata": {
    "papermill": {
     "duration": 0.004,
     "end_time": "2025-06-07T15:28:10.331007",
     "exception": false,
     "start_time": "2025-06-07T15:28:10.327007",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Similary, there are 11 unique crop types in this column, we can easily encode this 0 -> 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f9a62317",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T15:28:10.340368Z",
     "iopub.status.busy": "2025-06-07T15:28:10.340055Z",
     "iopub.status.idle": "2025-06-07T15:28:10.482381Z",
     "shell.execute_reply": "2025-06-07T15:28:10.481366Z"
    },
    "jupyter": {
     "source_hidden": true
    },
    "papermill": {
     "duration": 0.149031,
     "end_time": "2025-06-07T15:28:10.484048",
     "exception": false,
     "start_time": "2025-06-07T15:28:10.335017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count       750000\n",
      "unique           7\n",
      "top       14-35-14\n",
      "freq        114436\n",
      "Name: Fertilizer Name, dtype: object\n",
      "['28-28' '17-17-17' '10-26-26' 'DAP' '20-20' '14-35-14' 'Urea']\n"
     ]
    }
   ],
   "source": [
    "# encoding crop type\n",
    "\n",
    "print(train_dataset[\"Fertilizer Name\"].describe())\n",
    "print(train_dataset[\"Fertilizer Name\"].unique())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45293ff1",
   "metadata": {
    "papermill": {
     "duration": 0.003888,
     "end_time": "2025-06-07T15:28:10.492181",
     "exception": false,
     "start_time": "2025-06-07T15:28:10.488293",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Similary, there are 7 unique crop types in this column, we can easily encode this 0 -> 6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59f976a4",
   "metadata": {
    "papermill": {
     "duration": 0.004413,
     "end_time": "2025-06-07T15:28:10.500554",
     "exception": false,
     "start_time": "2025-06-07T15:28:10.496141",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Enscapluting logic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9ce32661",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T15:28:10.510017Z",
     "iopub.status.busy": "2025-06-07T15:28:10.509673Z",
     "iopub.status.idle": "2025-06-07T15:28:10.627575Z",
     "shell.execute_reply": "2025-06-07T15:28:10.626758Z"
    },
    "papermill": {
     "duration": 0.124672,
     "end_time": "2025-06-07T15:28:10.629275",
     "exception": false,
     "start_time": "2025-06-07T15:28:10.504603",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-06-07 15:28:10.523352: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)                  │             <span style=\"color: #00af00; text-decoration-color: #00af00\">160</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">136</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">36</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span> │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span> │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)                  │             \u001b[38;5;34m160\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │             \u001b[38;5;34m136\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)                   │              \u001b[38;5;34m36\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m)                   │              \u001b[38;5;34m10\u001b[0m │\n",
       "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
       "│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │               \u001b[38;5;34m3\u001b[0m │\n",
       "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">345</span> (1.35 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m345\u001b[0m (1.35 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">345</span> (1.35 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m345\u001b[0m (1.35 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "class model_manager:\n",
    "    model = 0\n",
    "    def __init__(self):\n",
    "        self.define_simple_dnn_model()\n",
    "        \n",
    "    def define_simple_dnn_model(self):\n",
    "        self.model = tf.keras.models.Sequential([\n",
    "            layers.Input([9]),\n",
    "            layers.Dense(16 ),\n",
    "            layers.Dense(8),\n",
    "            layers.Dense(4),\n",
    "            layers.Dense(2),\n",
    "            layers.Dense(1),\n",
    "        ])\n",
    "\n",
    "model_manager_instance = model_manager()\n",
    "model_manager_instance.model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "be3d95d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T15:28:10.641415Z",
     "iopub.status.busy": "2025-06-07T15:28:10.641119Z",
     "iopub.status.idle": "2025-06-07T15:28:10.655883Z",
     "shell.execute_reply": "2025-06-07T15:28:10.654815Z"
    },
    "papermill": {
     "duration": 0.022454,
     "end_time": "2025-06-07T15:28:10.657366",
     "exception": false,
     "start_time": "2025-06-07T15:28:10.634912",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class workflow:\n",
    "    train_dataset = []\n",
    "    test_dataset = []\n",
    "    sample_submission = []\n",
    "    input_to_model = []\n",
    "    ground_truth = []\n",
    "    model_prediction = []\n",
    "    model = 0\n",
    "\n",
    "    def __init__(self, model_manager):\n",
    "        self.load_data()\n",
    "        self.model = model_manager.model\n",
    "\n",
    "    def load_data(self):\n",
    "        # read csv\n",
    "        competition_file_path = \"/kaggle/input/playground-series-s5e6\"\n",
    "        train_file_path = competition_file_path + \"/train.csv\"\n",
    "        test_file_path = competition_file_path + \"/test.csv\"\n",
    "        sample_subbission_file_path = competition_file_path + \"/sample_submission.csv\"\n",
    "        \n",
    "        self.train_dataset = pd.read_csv(train_file_path)\n",
    "        self.test_dataset = pd.read_csv(test_file_path)\n",
    "        self.sample_submission = pd.read_csv(sample_subbission_file_path)\n",
    "\n",
    "    def prepare_datasets(self):\n",
    "        self.encode_soil_type(self.train_dataset, is_printing = False)\n",
    "        self.encode_soil_type(self.test_dataset)\n",
    "\n",
    "        self.encode_crop_type(self.train_dataset)\n",
    "        self.encode_crop_type(self.test_dataset)\n",
    "\n",
    "        self.encode_fertilizer_name(self.train_dataset)\n",
    "\n",
    "        self.train_dataset = self.convert_column_type(self.train_dataset)\n",
    "        self.test_dataset = self.convert_column_type(self.test_dataset)\n",
    "\n",
    "        self.ground_truth = self.train_dataset.pop(\"Fertilizer Name\")\n",
    "        self.input_to_model = self.train_dataset\n",
    "\n",
    "        #self.ground_truth = self.convert_column_type(self.ground_truth)\n",
    "        #self.input_to_model = self.convert_column_type(self.input_to_model)\n",
    "\n",
    "    def encode_soil_type(self, dataset, is_printing = False):\n",
    "        if is_printing:\n",
    "            print(dataset[\"Soil Type\"].describe())\n",
    "            print(dataset[\"Soil Type\"].unique())\n",
    "\n",
    "        self.encode_value(dataset, \"Soil Type\", \"Clayey\", 0)\n",
    "        self.encode_value(dataset, \"Soil Type\", \"Sandy\", 1)\n",
    "        self.encode_value(dataset, \"Soil Type\", \"Red\", 0)\n",
    "        self.encode_value(dataset, \"Soil Type\", \"Loamy\", 3)\n",
    "        self.encode_value(dataset, \"Soil Type\", \"Black\", 4)\n",
    "\n",
    "    def encode_value(self, dataset, column_name, value_to_replace, new_value):\n",
    "        column = dataset.loc[:, [column_name]]\n",
    "        mask = [dataset[column_name] == value_to_replace]\n",
    "        column[mask] = new_value\n",
    "        dataset[column_name] = column\n",
    "\n",
    "    def encode_crop_type(self, dataset):\n",
    "        self.encode_value(dataset, \"Crop Type\", \"Sugarcane\", 0)\n",
    "        self.encode_value(dataset, \"Crop Type\", \"Millets\", 1)\n",
    "        self.encode_value(dataset, \"Crop Type\", \"Barley\", 2)\n",
    "        self.encode_value(dataset, \"Crop Type\", \"Paddy\", 3)\n",
    "        self.encode_value(dataset, \"Crop Type\", \"Pulses\", 4)\n",
    "        self.encode_value(dataset, \"Crop Type\", \"Tobacco\", 5)\n",
    "        self.encode_value(dataset, \"Crop Type\", \"Ground Nuts\", 6)\n",
    "        self.encode_value(dataset, \"Crop Type\", \"Maize\", 7)\n",
    "        self.encode_value(dataset, \"Crop Type\", \"Cotton\", 8)\n",
    "        self.encode_value(dataset, \"Crop Type\", \"Wheat\", 9)\n",
    "        self.encode_value(dataset, \"Crop Type\", \"Oil seeds\", 10)\n",
    "\n",
    "    def encode_fertilizer_name(self, dataset):\n",
    "        self.encode_value(dataset, \"Fertilizer Name\", \"28-28\", 0)\n",
    "        self.encode_value(dataset, \"Fertilizer Name\", \"17-17-17\", 1)\n",
    "        self.encode_value(dataset, \"Fertilizer Name\", \"10-26-26\", 2)\n",
    "        self.encode_value(dataset, \"Fertilizer Name\", \"DAP\", 3)\n",
    "        self.encode_value(dataset, \"Fertilizer Name\", \"20-20\", 4)\n",
    "        self.encode_value(dataset, \"Fertilizer Name\", \"14-35-14\", 5)\n",
    "        self.encode_value(dataset, \"Fertilizer Name\", \"Urea\", 6)\n",
    "\n",
    "    def convert_database_types(self, database, is_test_dataset = False):\n",
    "        self.convert_column_type(self.train_dataset[\"Soil Type\"])\n",
    "        self.convert_column_type(self.train_dataset[\"Crop Type\"])\n",
    "        self.convert_column_type(self.train_dataset[\"Fertilizer Name\"])\n",
    "        \n",
    "    def convert_column_type(self, column):\n",
    "        return column.astype(\"int64\")\n",
    "        \n",
    "\n",
    "    def build_model(self):\n",
    "        loss_function = tf.keras.losses.CategoricalHinge()\n",
    "        self.model.compile(optimizer=\"adam\", loss=loss_function, metrics=[\"accuracy\"])\n",
    "\n",
    "    def train_model(self):\n",
    "        self.model.fit(self.input_to_model, self.ground_truth)\n",
    "\n",
    "    def predict_test_dataset(self):\n",
    "        self.model_prediction = self.model.predict(self.test_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c0714f43",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T15:28:10.669184Z",
     "iopub.status.busy": "2025-06-07T15:28:10.668416Z",
     "iopub.status.idle": "2025-06-07T15:29:05.528987Z",
     "shell.execute_reply": "2025-06-07T15:29:05.528025Z"
    },
    "papermill": {
     "duration": 54.868183,
     "end_time": "2025-06-07T15:29:05.530783",
     "exception": false,
     "start_time": "2025-06-07T15:28:10.662600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m23438/23438\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m51s\u001b[0m 2ms/step - accuracy: 0.1496 - loss: 1144.5005\n"
     ]
    }
   ],
   "source": [
    "workflow_instance = workflow(model_manager_instance)\n",
    "workflow_instance.prepare_datasets()\n",
    "workflow_instance.build_model()\n",
    "workflow_instance.train_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7550cde0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T15:29:05.640866Z",
     "iopub.status.busy": "2025-06-07T15:29:05.639957Z",
     "iopub.status.idle": "2025-06-07T15:29:18.008274Z",
     "shell.execute_reply": "2025-06-07T15:29:18.007240Z"
    },
    "papermill": {
     "duration": 12.424492,
     "end_time": "2025-06-07T15:29:18.010186",
     "exception": false,
     "start_time": "2025-06-07T15:29:05.585694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m7813/7813\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 1ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[ 935.2328 ],\n",
       "       [ 935.2577 ],\n",
       "       [ 935.30115],\n",
       "       ...,\n",
       "       [1246.934  ],\n",
       "       [1246.89   ],\n",
       "       [1246.9164 ]], dtype=float32)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "workflow_instance.predict_test_dataset()\n",
    "workflow_instance.model_prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3da380b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T15:29:18.222088Z",
     "iopub.status.busy": "2025-06-07T15:29:18.221732Z",
     "iopub.status.idle": "2025-06-07T15:29:18.228082Z",
     "shell.execute_reply": "2025-06-07T15:29:18.227277Z"
    },
    "papermill": {
     "duration": 0.158267,
     "end_time": "2025-06-07T15:29:18.229396",
     "exception": false,
     "start_time": "2025-06-07T15:29:18.071129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1091.1262"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "workflow_instance.model_prediction.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3e552d57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-06-07T15:29:18.350471Z",
     "iopub.status.busy": "2025-06-07T15:29:18.349517Z",
     "iopub.status.idle": "2025-06-07T15:29:18.359564Z",
     "shell.execute_reply": "2025-06-07T15:29:18.358676Z"
    },
    "papermill": {
     "duration": 0.072372,
     "end_time": "2025-06-07T15:29:18.361027",
     "exception": false,
     "start_time": "2025-06-07T15:29:18.288655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Fertilizer Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>750000</td>\n",
       "      <td>14-35-14 10-26-26 Urea</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>750001</td>\n",
       "      <td>14-35-14 10-26-26 Urea</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>750002</td>\n",
       "      <td>14-35-14 10-26-26 Urea</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>750003</td>\n",
       "      <td>14-35-14 10-26-26 Urea</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>750004</td>\n",
       "      <td>14-35-14 10-26-26 Urea</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249995</th>\n",
       "      <td>999995</td>\n",
       "      <td>14-35-14 10-26-26 Urea</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249996</th>\n",
       "      <td>999996</td>\n",
       "      <td>14-35-14 10-26-26 Urea</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249997</th>\n",
       "      <td>999997</td>\n",
       "      <td>14-35-14 10-26-26 Urea</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249998</th>\n",
       "      <td>999998</td>\n",
       "      <td>14-35-14 10-26-26 Urea</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>249999</th>\n",
       "      <td>999999</td>\n",
       "      <td>14-35-14 10-26-26 Urea</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>250000 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id         Fertilizer Name\n",
       "0       750000  14-35-14 10-26-26 Urea\n",
       "1       750001  14-35-14 10-26-26 Urea\n",
       "2       750002  14-35-14 10-26-26 Urea\n",
       "3       750003  14-35-14 10-26-26 Urea\n",
       "4       750004  14-35-14 10-26-26 Urea\n",
       "...        ...                     ...\n",
       "249995  999995  14-35-14 10-26-26 Urea\n",
       "249996  999996  14-35-14 10-26-26 Urea\n",
       "249997  999997  14-35-14 10-26-26 Urea\n",
       "249998  999998  14-35-14 10-26-26 Urea\n",
       "249999  999999  14-35-14 10-26-26 Urea\n",
       "\n",
       "[250000 rows x 2 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "workflow_instance.sample_submission"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 12184666,
     "sourceId": 91717,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31040,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 100.277599,
   "end_time": "2025-06-07T15:29:21.591473",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-06-07T15:27:41.313874",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
